{"version":3,"sources":["Song.js","Podcast.js","Status.js","Playlist.js","App.js","reportWebVitals.js","index.js"],"names":["Song","_ref","title","artist","year","React","createElement","Podcast","season","episode","episodeTitle","concat","Status","currentTrack","isPlaying","onDoubleClick","onNext","onPrev","onPlayPause","status","setStatus","useState","useEffect","podcast","onClick","handleNext","FontAwesomeIcon","icon","faStepForward","handlePrev","faStepBackward","handlePlayPause","faPause","faPlay","Playlist","playlistData","setPlaylistData","currentTrackIndex","setCurrentTrackIndex","setIsPlaying","fetch","then","response","json","data","catch","error","console","className","prevIndex","length","handleShuffle","shuffledPlaylist","sort","Math","random","faRandom","map","track","index","key","handleDoubleClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.046c0ff5.chunk.js","sourcesContent":["// Song.js\nimport React from 'react';\n\nconst Song = ({ title, artist, year }) => {\n  return (\n    <div>\n      <h3>Song</h3>\n      <p>Title: {title}</p>\n      <p>Artist: {artist}</p>\n      <p>Year: {year}</p>\n    </div>\n  );\n};\n\nexport default Song;\n","// Podcast.js\nimport React from 'react';\n\nconst Podcast = ({ season, episode, episodeTitle }) => {\n  const displayEpisode = season\n    ? `Season ${season} Episode ${episode}`\n    : `Episode ${episode}`;\n\n  return (\n    <div>\n      <h3>Podcast</h3>\n      <p>Episode Title: {episodeTitle}</p>\n      {episode && <p>Episode: {episode}</p>}\n      {season && <p>Season: {season}</p>}\n    </div>\n  );\n};\n\nexport default Podcast;\n","import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faStepForward, faStepBackward, faRandom } from '@fortawesome/free-solid-svg-icons';\n\nconst Status = ({ currentTrack, isPlaying, onDoubleClick, onNext, onPrev, onPlayPause }) => {\n  const [status, setStatus] = useState('');\n\n  useEffect(() => {\n    if (currentTrack) {\n      if (currentTrack.title) {\n        setStatus(`Playing: ${currentTrack.title}`);\n      } else if (currentTrack.episodeTitle) {\n        setStatus(`Playing: ${currentTrack.episodeTitle}`);\n      } else if (currentTrack.podcast) {\n        setStatus(`Playing: ${currentTrack.podcast}`);\n      } else {\n        setStatus('Unknown track');\n      }\n    } else {\n      setStatus('');\n    }\n  }, [currentTrack]);\n\n  const handleNext = () => {\n    onNext();\n  };\n\n  const handlePrev = () => {\n    onPrev();\n  };\n\n  const handlePlayPause = () => {\n    if (isPlaying) {\n      setStatus('Paused');\n    } else {\n      setStatus(`Playing: ${currentTrack.title}`);\n    }\n    onPlayPause();\n  };\n\n  return (\n    <div>\n      <p>{status}</p>\n      <button onClick={handleNext}><FontAwesomeIcon icon={faStepForward} /></button>\n      <button onClick={handlePrev}><FontAwesomeIcon icon={faStepBackward} /></button>\n      <button onClick={handlePlayPause}>{isPlaying ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}</button>\n    </div>\n  );\n};\n\nexport default Status;\n","// Playlist.js\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport Status from './Status'; // Import the Status component\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faStepForward, faStepBackward, faRandom } from '@fortawesome/free-solid-svg-icons';\n\nconst Playlist = () => {\n  const [playlistData, setPlaylistData] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  useEffect(() => {\n    fetch('https://dhanashreedeshmukh.github.io/audio-tracks/tracks.json')\n      .then(response => response.json())\n      .then(data => setPlaylistData(data))\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  const handleShuffle = () => {\n    const shuffledPlaylist = [...playlistData].sort(() => Math.random() - 0.5);\n    setPlaylistData(shuffledPlaylist);\n    setCurrentTrackIndex(0);\n  };\n\n  const handlePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const handlePrev = () => {\n    setCurrentTrackIndex(prevIndex => (prevIndex === 0 ? playlistData.length - 1 : prevIndex - 1));\n  };\n\n  const handleNext = () => {\n    setCurrentTrackIndex(prevIndex => (prevIndex === playlistData.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  const handleDoubleClick = (index) => {\n    if (index !== currentTrackIndex) {\n      setCurrentTrackIndex(index);\n      setIsPlaying(true); // Start playing the clicked song\n    }\n  };\n\n  const currentTrack = playlistData[currentTrackIndex];\n\n  return (\n    <div className=\"container\">\n      <div className=\"audio-player\">\n        <h2>Playlist</h2>\n        <Status\n          currentTrack={currentTrack}\n          isPlaying={isPlaying}\n          onNext={handleNext}\n          onPrev={handlePrev}\n          onPlayPause={handlePlayPause}\n        />\n        <div>\n          <button onClick={handleShuffle}><FontAwesomeIcon icon={faRandom} /></button>\n        </div>\n        <ul>\n          {playlistData.map((track, index) => (\n            <li key={index} onDoubleClick={() => handleDoubleClick(index)}>\n              {/* Render Song or Podcast component based on the track */}\n              {track.title && track.artist && track.year ? (\n                <Song\n                  title={track.title}\n                  artist={track.artist}\n                  year={track.year}\n                />\n              ) : track.episode ? (\n                <Podcast \n                  season={track.season}\n                  episodeTitle={track.episodeTitle} \n                  episode={track.episode}\n                />\n              ) : track.podcast ? (\n                <Podcast \n                  podcast={track.podcast}\n                  episodeTitle={track.episodeTitle} \n                />\n              ) : (\n                <p>Unsupported track format</p>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Playlist;\n","import React from 'react';\nimport Playlist from './Playlist';\nimport './App.css';\nimport './styles.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Playlist />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './styles.css';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}